Certainly! To create a wrapper library for the provided code and add some enhancements, you can follow a similar approach as before. I'll create a HttpClientWrapper class in a new library that extends the functionality, including additional enhancements. Please note that the enhancements I've added are illustrative, and you may need to tailor them based on your specific requirements.

Create a new class library project:

bash
Copy code
dotnet new classlib -n YourWrapperLibrary
Reference Microsoft.Extensions.Http and Polly NuGet packages:

bash
Copy code
dotnet add package Microsoft.Extensions.Http
dotnet add package Polly
Modify the .csproj file of your wrapper library:

xml
Copy code
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Library</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <LangVersion>10</LangVersion>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Http" Version="6.0.0" />
    <PackageReference Include="Polly" Version="7.2.2" />
    <!-- Add other dependencies as needed -->
  </ItemGroup>

</Project>
Update the versions to the latest available.

Create a HttpClientWrapper class in your wrapper library:

csharp
Copy code
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Polly;
using System;
using System.Net.Http;
using System.Threading.Tasks;

namespace YourWrapperLibrary
{
    public class HttpClientWrapper
    {
        private const string CLIENT_NAME = "YourClientName";

        public static IHostBuilder CreateFaultBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureServices((hostContext, services) =>
                {
                    services.AddTransient<DistributedMessageHandler>();

                    services.AddHttpClient(CLIENT_NAME)
                        .AddHttpMessageHandler<DistributedMessageHandler>()
                        .AddPolicyHandler(GetRetryPolicy())
                        .AddPolicyHandler(GetCircuitBreakerPolicy());

                    services.AddHttpContextAccessor();
                });

        public static async Task<HttpResponseMessage> SendHttpRequestAsync(string url)
        {
            var host = CreateHostBuilder(Array.Empty<string>()).Build();
            var service = host.Services.GetRequiredService<IHttpClientFactory>();
            var httpClient = service.CreateClient(CLIENT_NAME);

            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri(url)
            };

            return await httpClient.SendAsync(request).ConfigureAwait(false);
        }

        private static IAsyncPolicy<HttpResponseMessage> GetRetryPolicy()
        {
            // Implement your retry policy logic here
            return Policy<HttpResponseMessage>
                .Handle<HttpRequestException>()
                .RetryAsync(3, (ex, retryCount, context) =>
                {
                    // Log the retry information if needed
                });
        }

        private static IAsyncPolicy<HttpResponseMessage> GetCircuitBreakerPolicy()
        {
            // Implement your circuit breaker policy logic here
            return Policy<HttpResponseMessage>
                .Handle<HttpRequestException>()
                .CircuitBreakerAsync(3, TimeSpan.FromSeconds(30));
        }
    }
}
This wrapper class includes the CreateFaultBuilder method to set up the host with services, an SendHttpRequestAsync method to send an HTTP request using the configured HttpClient, and two policies for retry and circuit breaker.

Build and package your wrapper library:

bash
Copy code
dotnet build
dotnet pack
Use the wrapper library in a consumer project:

csharp
Copy code
using System;
using System.Net.Http;
using System.Threading.Tasks;
using YourWrapperLibrary;

class Program
{
    static async Task Main()
    {
        var response = await HttpClientWrapper.SendHttpRequestAsync("http://azure.abhi.net");
        
        // Process the response as needed
        Console.WriteLine($"Received response: {response.StatusCode}");
    }
}
Ensure you reference your wrapper library in the consumer project.

This example provides a basic illustration of how you can wrap and enhance the HttpClient functionality. Adjust the code based on your specific enhancements and requirements.





