import speech_recognition as sr
import os
import pyautogui

recognizer = sr.Recognizer()

def listen():
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source, timeout=5)
        try:
            return recognizer.recognize_google(audio)
        except sr.UnknownValueError:
            return "Sorry, I didn't catch that."

def open_application(app_name):
    try:
        os.system(f"start {app_name}")
    except Exception as e:
        print(f"Error: {e}")

def write_note(note_text):
    pyautogui.write(note_text)

while True:
    command = listen().lower()

    if "open" in command:
        app_name = command.split("open ", 1)[1]
        open_application(app_name)

    if "write" in command:
        note_text = command.split("write ", 1)[1]
        write_note(note_text)
------------------------------------------------------------
import os

# Function to open applications
def open_application(app_name):
    try:
        os.system(f"start {app_name}")
        print(f"Opening {app_name}...")
    except Exception as e:
        print(f"Error: {e}")

# Function to write a note to a text file
def write_note(note_text):
    try:
        with open("note.txt", "a") as file:
            file.write(note_text + "\n")
        print("Note written successfully.")
    except Exception as e:
        print(f"Error: {e}")

# Main loop for user interaction
while True:
    command = input("Enter a command (e.g., 'open Notepad', 'write This is a note', 'exit'): ").lower()

    if command == "exit":
        print("Goodbye!")
        break
    elif command.startswith("open "):
        app_name = command.split("open ", 1)[1]
        open_application(app_name)
    elif command.startswith("write "):
        note_text = command.split("write ", 1)[1]
        write_note(note_text)
    else:
        print("Unrecognized command. Try again.")

--------------------------------------------------------------------------
from selenium import webdriver

# Path to the Chrome WebDriver executable (replace with your own path)
webdriver_path = "path/to/chromedriver"

# URL of the web page you want to interact with
url = "https://example.com"

# Field and value to input
field_id = "your_field_id"  # Replace with the ID or other locator of the field
value_to_fill = "Your value here"

# Create a Chrome WebDriver instance
driver = webdriver.Chrome(executable_path=webdriver_path)

# Open the web page
driver.get(url)

# Find the field by its ID and fill it with the value
field = driver.find_element_by_id(field_id)
field.send_keys(value_to_fill)

# Optionally, submit the form (if needed)
# field.submit()

# Close the browser
driver.quit()

-------------------FINRA DATA Search---------------------------------------------------
import requests
from bs4 import BeautifulSoup

def search_finra(query):
    base_url = "https://brokercheck.finra.org/"
    search_url = f"{base_url}search.html"

    # Send a GET request to the search URL with the query as a parameter
    response = requests.get(search_url, params={"Search": query})

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, "html.parser")
        # Extract and display relevant information
        results = soup.find_all("div", class_="results-item")
        for result in results:
            name = result.find("h4", class_="registration-detail-person-name")
            details = result.find("p", class_="registration-detail-person-bio")
            if name and details:
                print("Name:", name.text)
                print("Details:", details.text)
                print()
    else:
        print("Failed to retrieve data. Status Code:", response.status_code)

if __name__ == "__main__":
    query = input("Enter your search query (e.g., name, firm, or CRD#): ")
    search_finra(query)

--------------------------------Meeting --------------------------
import win32com.client
import datetime
import json

# Create a new Outlook Application object
outlook = win32com.client.Dispatch("Outlook.Application")
namespace = outlook.GetNamespace("MAPI")

# Get the Calendar folder
calendar = namespace.GetDefaultFolder(9)  # 9 represents olFolderCalendar

# Get today's date
today = datetime.datetime.now().date()

# Create a list to store the meeting data
meeting_data = []

# Loop through calendar items and filter for today's meetings
for item in calendar.Items:
    if item.Start.date() == today:
        meeting_info = {
            "Subject": item.Subject,
            "Start Time": item.Start,
            "End Time": item.End
        }
        meeting_data.append(meeting_info)

# Convert the meeting data to JSON
meeting_json = json.dumps(meeting_data, indent=4)

# Print or return the JSON data
print(meeting_json)
