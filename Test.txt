using System;
using System.Text.RegularExpressions;

public class DataMasking
{
    public static string PartialMasking(string input, string pattern, int visibleLength)
    {
        if (string.IsNullOrEmpty(input) || string.IsNullOrEmpty(pattern) || visibleLength <= 0)
        {
            // Handle invalid input
            return input;
        }

        // Use regular expression to find matches
        MatchCollection matches = Regex.Matches(input, pattern);

        // Iterate through matches and apply partial masking
        foreach (Match match in matches)
        {
            if (match.Groups.Count > 1)
            {
                // Keep only a portion of the sensitive information visible
                string visiblePart = match.Groups[1].Value.Substring(Math.Max(0, match.Groups[1].Value.Length - visibleLength));
                string maskedValue = new string('*', match.Groups[1].Value.Length - visiblePart.Length) + visiblePart;

                // Replace the sensitive information with the masked value
                input = input.Replace(match.Groups[1].Value, maskedValue);
            }
        }

        return input;
    }

    public static void Main()
    {
        // Example usage
        string inputText = "This is a sample credit card number: 1234-5678-9012-3456 and a birth year: 1980.";

        // Define a regular expression pattern for credit card numbers
        string creditCardPattern = @"\b(\d{4}-\d{4}-\d{4}-\d{4})\b";

        // Perform partial masking on credit card numbers
        string maskedText = PartialMasking(inputText, creditCardPattern, 4);

        Console.WriteLine("Original Text: " + inputText);
        Console.WriteLine("Masked Text: " + maskedText);
    }
}
