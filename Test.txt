using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

public static class LoggerWrapper
{
    private static readonly InternalLogger Logger = new InternalLogger();

    // Other properties and fields...

    public static Guid InstanceId => Logger.InstanceId;

    public static string ApplicationName => Configuration["ApplicationName"] ?? HelperMethod.ExecutableName;

    // Use the updated LoggerProperties class
    public static LoggerProperties DefaultProperties { get; } = new LoggerProperties();

    public static void LogInitialization(string logMessage, string? source = null, [CallerMemberName] string? methodName = null, LoggerProperties? properties = null)
    {
        var mergedProperties = MergeProperties(properties);
        Logger.LogEvent(new BaseEventBuilder
        {
            EventMessage = logMessage,
            LoggingEventlevel = LoggingEventlevels.Initialization,
            EventSource = source,
            MethodName = methodName,
            AdditionalProperties = mergedProperties.AllProperties
        });
    }

    public static void LogShutdown(string logMessage, string? source = null, [CallerMemberName] string? methodName = null, LoggerProperties? properties = null)
    {
        var mergedProperties = MergeProperties(properties);
        Logger.LogEvent(new BaseEventBuilder
        {
            EventMessage = logMessage,
            LoggingEventlevel = LoggingEventlevels.Shutdown,
            EventSource = source,
            MethodName = methodName,
            AdditionalProperties = mergedProperties.AllProperties
        });
    }

    public static void LogException(Exception exception, string? source, [CallerMemberName] string? methodName = null, LoggerProperties? properties = null)
    {
        var mergedProperties = MergeProperties(properties);
        Logger.LogException(exception, null, source, mergedProperties, methodName);
    }

    public static void LogInformation(string logMessage, string? source, [CallerMemberName] string? methodName = null, LoggerProperties? properties = null)
    {
        var mergedProperties = MergeProperties(properties);
        Logger.LogInformation(logMessage, LoggingEventlevels.Informational, source, mergedProperties.AllProperties, methodName);
    }

    public static void LogDebug(string logMessage, string? source, [CallerMemberName] string? methodName = null, LoggerProperties? properties = null)
    {
        var mergedProperties = MergeProperties(properties);
        Logger.LogDebug(logMessage, LoggingEventlevels.Debug, source, mergedProperties.AllProperties, methodName);
    }

    private static LoggerProperties MergeProperties(LoggerProperties? properties)
    {
        var mergedProperties = new LoggerProperties();

        // Merge default properties
        foreach (var defaultProperty in DefaultProperties.AllProperties)
        {
            if (!mergedProperties.AllProperties.ContainsKey(defaultProperty.Key))
            {
                mergedProperties.AddProperty(defaultProperty.Key, defaultProperty.Value);
            }
        }

        // Merge consumer-added properties
        if (properties != null)
        {
            foreach (var consumerProperty in properties.AllProperties)
            {
                if (!mergedProperties.AllProperties.ContainsKey(consumerProperty.Key))
                {
                    mergedProperties.AddProperty(consumerProperty.Key, consumerProperty.Value);
                }
            }
        }

        return mergedProperties;
    }
}
