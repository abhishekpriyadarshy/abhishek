public async Task<string> GetAccessTokenAsync()
{
    var clientId = "your_client_id";
    var clientSecret = "your_client_secret";
    var tokenUrl = "https://your-token-url.com/oauth/token"; // Token URL

    using (var client = new HttpClient())
    {
        var postData = new List<KeyValuePair<string, string>>
        {
            new KeyValuePair<string, string>("client_id", clientId),
            new KeyValuePair<string, string>("client_secret", clientSecret),
            new KeyValuePair<string, string>("grant_type", "client_credentials")
        };

        var content = new FormUrlEncodedContent(postData);
        var response = await client.PostAsync(tokenUrl, content);

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            var tokenData = JsonConvert.DeserializeObject<TokenResponse>(jsonResponse);
            return tokenData.access_token; // Assuming 'access_token' is the field in the JSON response
        }
        else
        {
            throw new Exception("Error retrieving access token");
        }
    }
}

public class TokenResponse
{
    public string access_token { get; set; }
    public int expires_in { get; set; }
}
----------------------------------------------------------------------------------------------------------------
public async Task<string> CallApiWithAccessTokenAsync(string accessToken)
{
    var apiUrl = "https://your-api-url.com/resource"; // Replace with your actual API URL

    using (var client = new HttpClient())
    {
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        var response = await client.GetAsync(apiUrl);

        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadAsStringAsync();
        }
        else
        {
            throw new Exception("Error calling API");
        }
    }
}
--------------------------------------------
public class ApiController : Controller
{
    private readonly IApiService _apiService;

    public ApiController(IApiService apiService)
    {
        _apiService = apiService;
    }

    public async Task<IActionResult> GetData()
    {
        try
        {
            var accessToken = await _apiService.GetAccessTokenAsync();
            var apiData = await _apiService.CallApiWithAccessTokenAsync(accessToken);
            return Content(apiData);
        }
        catch (Exception ex)
        {
            return Content($"Error: {ex.Message}");
        }
    }
}
