using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace APICallWithOAuth
{
    class Program
    {
        static async Task Main(string[] args)
        {
            // OAuth 2.0 Token endpoint
            string tokenUrl = "https://your-auth-server.com/token";
            string clientId = "your-client-id";
            string clientSecret = "your-client-secret";

            // API endpoint that requires OAuth 2.0 Token
            string apiUrl = "https://your-api-server.com/your-post-endpoint";

            // Fetch OAuth token
            var token = await GetOAuthToken(tokenUrl, clientId, clientSecret);

            if (token != null)
            {
                // Call the API using the token
                var result = await PostRequest(apiUrl, token);
                Console.WriteLine(result);
            }
        }

        // Get OAuth 2.0 Token
        static async Task<string> GetOAuthToken(string tokenUrl, string clientId, string clientSecret)
        {
            using (var client = new HttpClient())
            {
                var request = new HttpRequestMessage(HttpMethod.Post, tokenUrl);
                
                // Prepare the request body (depending on the grant type you are using)
                var body = new StringContent($"client_id={clientId}&client_secret={clientSecret}&grant_type=client_credentials", 
                                             Encoding.UTF8, 
                                             "application/x-www-form-urlencoded");

                request.Content = body;

                var response = await client.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    var tokenResponse = await response.Content.ReadAsStringAsync();

                    // Assuming the token response is JSON
                    // {"access_token": "your_access_token", "expires_in": 3600, ...}
                    dynamic jsonResponse = Newtonsoft.Json.JsonConvert.DeserializeObject(tokenResponse);
                    return jsonResponse.access_token;
                }
                else
                {
                    Console.WriteLine("Failed to get OAuth token");
                    return null;
                }
            }
        }

        // Make a POST request with the token in the Authorization header
        static async Task<string> PostRequest(string apiUrl, string token)
        {
            using (var client = new HttpClient())
            {
                var request = new HttpRequestMessage(HttpMethod.Post, apiUrl);

                // Set the Authorization header
                request.Headers.Add("Authorization", $"Bearer {token}");

                // Prepare JSON body
                var jsonBody = "{\"key1\": \"value1\", \"key2\": \"value2\"}"; // Replace with your actual JSON payload
                request.Content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

                var response = await client.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    return await response.Content.ReadAsStringAsync();
                }
                else
                {
                    return $"Error: {response.StatusCode}";
                }
            }
        }
    }
}
