// Task:
// Analyze all .NET (.cs), Razor (.cshtml), and Web API files in the workspace to detect Cross-Site Request Forgery (CSRF) vulnerabilities.

// Objectives:
// 1. Identify controller actions (especially POST/PUT/DELETE) that change server state and are missing CSRF protection.
// 2. Detect absence of `[ValidateAntiForgeryToken]` on POST handlers in ASP.NET MVC or Razor Pages.
// 3. Check Razor forms for missing `@Html.AntiForgeryToken()`.
// 4. For APIs, check if:
//    - CSRF protection middleware is not configured
//    - There are unsafe CORS or cookie policies allowing cross-origin access
// 5. Highlight any method that accepts sensitive state changes (e.g., account updates, transfers, deletes) and is not properly protected.

// Vulnerable MVC example:
// [HttpPost]
// public IActionResult UpdateProfile(User user) { ... } // ← No CSRF token validation

// Vulnerable Razor view example:
// <form asp-action="UpdateProfile" method="post">
//     <!-- Missing @Html.AntiForgeryToken() -->
//     <input name="email" />
// </form>

// Expected secure alternatives:
// ✅ Decorate all non-GET actions with `[ValidateAntiForgeryToken]` in MVC
// ✅ Include `@Html.AntiForgeryToken()` in all Razor form posts
// ✅ For APIs, enforce token headers or same-site cookie checks
// ✅ Configure `services.AddAntiforgery()` with secure cookie options (HttpOnly, Secure, SameSite=Strict)
// ✅ Ensure CORS policy does not allow credentials from untrusted origins

// Secure MVC example:
// [HttpPost]
// [ValidateAntiForgeryToken]
// public IActionResult UpdateProfile(User user) { ... }

// Secure Razor form:
// <form asp-action="UpdateProfile" method="post">
//     @Html.AntiForgeryToken()
//     <input name="email" />
// </form>

// Secure API idea (token-based):
// - Require custom CSRF token header (e.g., `X-CSRF-TOKEN`) and verify server-side before processing the request.

// Begin scanning the workspace for:
// - Missing anti-forgery validation on actions
// - Razor forms missing anti-forgery tokens
// - Web APIs that modify state without CSRF defense
// - Insecure or misconfigured CORS/anti-forgery setups

// Then, provide secure replacements for each case.






88888888888888888888
// Task:
// Scan the entire workspace including all .NET (.cs) files, Razor (.cshtml) views, and any HTML output logic,
// to detect Cross-Site Scripting (XSS) vulnerabilities.

// Objectives:
// 1. Identify locations where untrusted user input is rendered into HTML output without proper encoding or sanitization.
// 2. Detect vulnerable patterns such as:
//    - Writing user input directly into Razor views using @userInput
//    - Manually constructing HTML with user input in controllers or views
//    - Using Response.Write(), Html.Raw(), or innerHTML assignments with unsanitized values
//    - JavaScript injection via dynamic script content
// 3. Pay attention to inputs from Request.Query, Form, RouteData, Model properties, or external sources

// Vulnerable Razor example:
// <div>@Request.Query["message"]</div>

// Vulnerable controller example:
// ViewBag.Script = "<script>" + userInput + "</script>";

// Unsafe use of Html.Raw:
// @Html.Raw(Request.Form["comment"])

// For each issue found:
// - List the file name, line number, and a description of the vulnerability
// - Suggest secure alternatives using:
//   ✅ Razor HTML encoding (default `@` directive)
//   ✅ Html.Encode() in code-behind or controllers
//   ✅ Avoiding Html.Raw unless content is known-safe or sanitized
//   ✅ Using AntiXSS library or custom sanitizer for rich input
//   ✅ Encoding JSON in Razor using `@Html.Raw(Json.Encode(...))`

// Secure Razor example:
// <div>@Html.Encode(Request.Query["message"])</div>

// Secure controller output:
// ViewBag.ScriptSafe = HtmlEncoder.Default.Encode(userInput);

// Best Practices:
// ✅ Always encode user-supplied data before rendering to the browser
// ✅ Use AntiXSS library or WebUtility.HtmlEncode() in back-end logic
// ✅ Avoid injecting data into script tags or inline event handlers
// ❌ Never use Html.Raw or string concatenation to inject user input into HTML

// Begin scanning all Razor views (.cshtml), controller files (.cs), and HTML output logic
// for XSS vulnerabilities and provide a fixed version of the affected code:




7777777777777777777777
// Task:
// Scan all .NET (.cs) files in the workspace to detect SQL Injection (SQLi) vulnerabilities.

// Objectives:
// 1. Identify code where raw or interpolated SQL queries are executed using:
//    - ADO.NET (e.g., SqlCommand, OleDbCommand)
//    - Entity Framework with raw SQL (e.g., dbContext.Database.ExecuteSqlRaw, FromSqlRaw)
//    - Dapper or other ORM/query frameworks
// 2. Detect patterns where user input is directly concatenated or interpolated into SQL strings.
// 3. Flag any instance where:
//    - String concatenation or interpolation is used to build SQL queries
//    - Parameters are not used with parameterized queries or ORM-safe APIs
//    - Queries are constructed using untrusted input (from form fields, query parameters, etc.)

// Vulnerable examples to detect:
// ADO.NET:
// string query = "SELECT * FROM Users WHERE Username = '" + userInput + "'";
// SqlCommand cmd = new SqlCommand(query, connection);

// Entity Framework:
// dbContext.Users.FromSqlRaw("SELECT * FROM Users WHERE Name = '" + name + "'");

// For each vulnerable usage:
// - Report file name, method name, and line number
// - Explain the risk of SQL injection
// - Suggest a secure fix using parameterized queries or ORM methods

// Secure ADO.NET example:
// string query = "SELECT * FROM Users WHERE Username = @username";
// SqlCommand cmd = new SqlCommand(query, connection);
// cmd.Parameters.AddWithValue("@username", userInput);

// Secure EF Core example:
// dbContext.Users.FromSqlInterpolated($"SELECT * FROM Users WHERE Name = {name}");

// Best Practices:
// ✅ Always use parameterized queries (ADO.NET, EF, Dapper, etc.)
// ✅ Use FromSqlInterpolated (EF Core) instead of FromSqlRaw when injecting variables
// ✅ Validate input where applicable
// ❌ Never concatenate or interpolate untrusted input directly into SQL strings

// Begin scanning the entire codebase for SQLi risks and generate secure refactored code where applicable:



66666666666666666666
// Task:
// Scan the entire workspace, including all .NET (.cs) files, appsettings.json, and other configuration files,
// to detect and fix sensitive data exposure vulnerabilities.

// Objectives:
// 1. Detect hardcoded secrets or sensitive data such as:
//    - API keys
//    - Passwords
//    - Connection strings
//    - Certificates/private keys
//    - Tokens or secret environment values
// 2. Identify unsafe logging or output of sensitive information.
// 3. Check configuration files (e.g., appsettings.json, app.config, secrets.json) for:
//    - Storing secrets in plain text
//    - Lack of use of secure vaults or environment variables
// 4. Detect code that logs or returns sensitive data (e.g., logging passwords, returning entire user objects in API responses).

// Vulnerable examples:
// - In appsettings.json:
//   "ConnectionStrings": {
//     "DefaultConnection": "Server=myServer;User Id=sa;Password=MyP@ssword123;"
//   }
// - In code:
//   var password = "MyHardcodedPassword";
//   _logger.LogInformation("User password: " + password);

// For each vulnerability found:
// - Return the file name, line number, and the type of sensitive data exposed
// - Explain the risk
// - Suggest secure alternatives, such as:
//   ✅ Moving secrets to environment variables or Azure Key Vault / AWS Secrets Manager
//   ✅ Using ASP.NET Core’s Secret Manager during development
//   ✅ Masking or excluding sensitive fields in logs or responses
//   ✅ Applying [JsonIgnore] or DTO mappings to avoid overexposing models in API

// Example secure configuration:
// - In appsettings.json:
//   "ConnectionStrings": {
//     "DefaultConnection": "UseEnvironmentVariable:DefaultConnection"
//   }
// - In code:
//   var password = Environment.GetEnvironmentVariable("DB_PASSWORD");
//   _logger.LogInformation("User login attempted for: " + username); // Avoid logging password

// Start scanning all .cs, .json, .config, and .secrets files for:
// - Hardcoded passwords, tokens, keys
// - Unsafe logging
// - Exposed user data in APIs
// - Missing encryption or masking for sensitive config entries
// - Use of plaintext secrets in any config file

// Then provide remediation for each finding.



5555555555555555555
// Task:
// Scan all .NET (.cs) files in the current workspace to detect Server-Side Request Forgery (SSRF) vulnerabilities.

// Objective:
// 1. Identify places in the code where user-controlled input is used to make HTTP/HTTPS or other internal service requests using:
//    - HttpClient
//    - WebClient
//    - HttpWebRequest
//    - RestSharp or any third-party HTTP libraries
// 2. Flag any instance where the destination URL or host is derived directly from user input without validation or restriction.
// 3. Highlight code that can allow attackers to:
//    - Target internal services (e.g., localhost, metadata endpoints)
//    - Bypass firewall/IP restrictions
//    - Extract sensitive data via manipulated internal requests

// Vulnerable example:
// var client = new HttpClient();
// var response = await client.GetAsync(userInputUrl);

// Expected output:
// - List of vulnerable files and line numbers
// - Explanation of how the code is vulnerable to SSRF
// - Recommended secure alternative using URL validation, allowlist, or input restriction

// Secure example fix:
public async Task<IActionResult> SafeFetch(string userUrl)
{
    // Validate and allow only trusted domains
    var allowedHosts = new[] { "api.example.com", "trusted.com" };
    if (!Uri.TryCreate(userUrl, UriKind.Absolute, out var uri) || !allowedHosts.Contains(uri.Host))
        return BadRequest("Untrusted or invalid URL");

    using var client = new HttpClient();
    var response = await client.GetAsync(uri);
    var content = await response.Content.ReadAsStringAsync();
    return Ok(content);
}

// Best Practices:
// ✅ Use an allowlist of trusted domains
✅ Validate URLs with Uri.TryCreate and check scheme/host
✅ Reject requests to internal IP ranges (e.g., 127.0.0.1, 169.254.169.254)
// ❌ Avoid passing raw user input into HTTP requests without strict validation

// Begin scanning the codebase for potential SSRF risks and recommend secure replacements:


4444444444444444444

// Task:
// Analyze all .NET (.cs) files in the current workspace to detect insecure session management practices,
// particularly predictable or weak session identifiers.

// Objective:
// 1. Detect where session IDs or tokens are being generated, assigned, or handled insecurely.
// 2. Identify insecure patterns such as:
//    - Hardcoded or sequential session tokens
//    - Usage of predictable values (e.g., username, timestamp, incrementing counters) for session IDs
//    - Manual session handling without cryptographic randomness
//    - Lack of secure cookie flags (HttpOnly, Secure, SameSite)
//    - Session IDs passed in URLs

// Vulnerable example:
// HttpContext.Session.SetString("SessionId", user.Id.ToString() + DateTime.Now.Ticks);

// Expected secure practices to suggest:
// ✅ Use ASP.NET Core's built-in session management.
// ✅ Ensure session tokens are cryptographically random (e.g., use RNGCryptoServiceProvider or secure GUID).
// ✅ Set cookie flags like Secure, HttpOnly, SameSite.
// ✅ Never pass session tokens in query strings or URLs.

// Secure example:
// - Let ASP.NET Core handle the session cookie with:
// services.AddSession(options =>
// {
//     options.Cookie.HttpOnly = true;
//     options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
//     options.Cookie.SameSite = SameSiteMode.Strict;
//     options.IdleTimeout = TimeSpan.FromMinutes(20);
// });

// For each vulnerability found:
// - Return the file name, method, and line number.
// - Explain why the session handling is insecure.
// - Suggest a corrected version using cryptographically secure methods and best practices.

// Begin scanning all files for insecure session identifier generation and usage:


3333333333333333333
// Task:
// Scan all .NET (.cs) files in the workspace to detect potential Insecure Direct Object Reference (IDOR) vulnerabilities.

// Objective:
// 1. Identify code where sensitive resources (like files, database records, entity IDs) are accessed directly based on user-supplied input (e.g., ID in query string or form field) **without proper authorization checks**.
// 2. Look for patterns like:
//    - Accessing database records using a user-supplied ID (e.g., `var order = db.Orders.Find(orderId);`)
//    - Accessing file paths or internal objects using query/form parameters
//    - URL parameters mapped directly to data objects with no ownership or permission checks
// 3. Highlight code that allows access to objects based solely on user input without confirming that the user owns the object or is authorized to access it.

// Examples of vulnerable code:
// var document = db.Documents.Find(Request.Query["id"]);
// return File(document.Path, "application/pdf");

// For each vulnerability found:
// - Report file name, method, and line number
// - Explain why it's vulnerable to IDOR
// - Provide secure code fixes using:
//    a) Access control checks (e.g., `document.UserId == currentUser.Id`)
//    b) Claims-based or role-based authorization
//    c) Explicit object ownership validation

// Example fix:
public IActionResult GetDocument(int id)
{
    var document = db.Documents.Find(id);
    if (document == null || document.OwnerId != User.GetUserId())
        return Forbid();

    return File(document.Path, "application/pdf");
}

// Begin scanning the workspace for IDOR issues and generate secure alternatives for each:
	•	❌ Avoid: Returning objects directly from IDs without auth check
	•	✅ Use: User.Identity, HttpContext.User.Claims, or session info to verify object access
	•	✅ Ensure: Ownership or permission checks before exposing object data

222222222222222

// Task:
// Scan all .NET (.cs) files in the workspace to detect insecure deserialization vulnerabilities.

// Objective:
// 1. Identify usage of unsafe deserialization APIs or libraries, such as:
//    - BinaryFormatter.Deserialize
//    - SoapFormatter.Deserialize
//    - NetDataContractSerializer
//    - JavaScriptSerializer
//    - DataContractSerializer with untrusted data
// 2. Highlight code where untrusted input (e.g., from HTTP requests, form data, files, query parameters) is passed into deserialization methods without validation or type-checking.
// 3. Mark these as insecure deserialization vulnerabilities.

// Examples of insecure code patterns to detect:
// - new BinaryFormatter().Deserialize(stream);
// - formatter.Deserialize(Request.Body);

// For each issue found:
// - List the file name, method name, and line number.
// - Explain why the code is vulnerable.
// - Suggest a safer alternative (e.g. use safe serializers like System.Text.Json or Newtonsoft.Json with type restrictions).
// - If deserialization is necessary, ensure:
//    a) Type filtering or known safe types are used
//    b) Input is validated
//    c) Dangerous formatters (BinaryFormatter, SoapFormatter) are avoided

// Example vulnerable code:
public object DeserializeInput(byte[] data)
{
    var formatter = new BinaryFormatter();
    using var stream = new MemoryStream(data);
    return formatter.Deserialize(stream);
}

// Example secure fix:
public T? SafeDeserialize<T>(string json)
{
    return JsonSerializer.Deserialize<T>(json); // System.Text.Json is type-safe and avoids arbitrary code execution
}

// Begin scanning and remediating insecure deserialization patterns across the workspace:




111111111111111111111111
// Task:
// Scan all .NET source code files in the current workspace for Command Injection vulnerabilities.

// Objective:
// 1. Detect unsafe use of command execution methods like:
//    - Process.Start
//    - cmd.exe, powershell, bash, or other shells
// 2. Identify any instance where user input (e.g., from request parameters, form fields, query strings) is directly or indirectly used to construct command-line arguments.
// 3. Highlight vulnerable patterns such as:
//    - String concatenation or interpolation involving user input
//    - Absence of input validation or sanitization
// 4. Suggest secure alternatives and refactor vulnerable code blocks using:
//    - Input validation/whitelisting
//    - Safe APIs (e.g., ProcessStartInfo.ArgumentList)
//    - Avoiding shell usage altogether if possible

// Additional Instructions:
// - Check all C# (.cs) files in the workspace.
// - Return a list of files and line numbers where issues are found.
// - Provide a fixed version of the code for each finding.
// - Comment each fix with explanation for the change.

// Example vulnerable pattern to detect:
// Process.Start("cmd.exe", "/c " + userInput);

// Example secure fix to generate:
// - Validate userInput with Regex or whitelisting.
// - Use ProcessStartInfo and ArgumentList.
// - Disable shell execution.

// Begin analysis and remediation suggestions below:



0000000000000000000
# Enhanced Unit Test Instructions (.NET, C#, XUnit, Moq)
Imports: Import required libraries for xUnit and Moq:
    Example:using Xunit;
            using Moq;

Define Test Methods: Mark with the xUnit [Fact] attribute for individual test cases.
Dependencies Mocking: Mock dependencies using Moq.Mock<T> where T is an interface or class.
Constructor: Initialize mocks and the class under test in the test class constructor.

Naming Conventions:
    Name tests after the method under test, without the "Test" prefix.
    Good Example: GetUserById_ReturnsUser
    Bad Example: TestGetUserById
System Under Test (SUT) Naming: Name the class under test _testObj for consistency.

Pattern: Use the Arrange-Act-Assert (AAA) pattern, with clear comments to guide Copilot:
    // Arrange: Set up mocks and test data
    // Act: Call GetUserById
    // Assert: Verify the returned user

A. Arrange
    Purpose: Set up test conditions, including test data and mock behavior.
        Providing specific input data for the method under test.
        Defining expected outcomes.
    Mocking:
        Use Mock<T>.Setup for methods, Mock<T>.SetupGet for property getters, and Mock<T>.SetupSet for setters.
        Example:
            // Mock a method
            _mock.Setup(x => x.GetById(It.IsAny<Guid>())).Returns(new User());
            // Mock a property
            _mock.SetupGet(x => x.SomeProperty).Returns(42);

    Mocking Class Under Test:
        To mock members (e.g., properties, methods) of the class under test, use Mock<T> with CallBase = true:
        Example: 
            // Mock UserService with real method calls unless overridden
            _testObjMock = new Mock<UserService>(_repoMock.Object, _loggerMock.Object) { CallBase = true };
            _testObj = _testObjMock.Object;

    Void Methods: Mock void methods with Mock<T>.Setup and verify with Mock<T>.Verify:
        Example: // Mock a void method
            _mock.Setup(x => x.Save(It.IsAny<User>())).Verifiable();

B. Act
    Purpose: Invoke the method under test exactly once.
        Capture the returned result or any thrown exceptions.
        Use `await` when calling asynchronous methods
        Example: // Act: Call the method under test
            var result = _testObj.GetUserById(userId);

C. Assert
    Purpose: Use XUnit assertions to verify the results.
    Assertions:
        Use `Assert.Equal(expected, actual)` to compare objects or values:
        Example: // Assert: Verify the result
            Assert.Equal(expectedUser, actualUser);
        
        Use `Assert.Same(expectedObject, actualObject)` to verify that two variables refer to the exact same object instance
        
        Use Assert.Throws<TException> for synchronous exceptions and Assert.ThrowsAsync<TException> for asynchronous exceptions
        Example: // Assert: Verify an exception is thrown
            Assert.Throws<KeyNotFoundException>(() => _testObj.GetUserById(userId));

    Mock Verification: Verify mock interactions with Mock<T>.Verify:
        Example: // Verify: Ensure the mock was called
            _mock.Verify(x => x.GetById(userId), Times.Once());

Things to Avoid
    Assertions: Use Assert.Equal(expectedEntity, actualEntity) instead of Assert.NotNull(actualEntity) when comparing objects.
    Parameterized Tests: Avoid xUnit [Theory] and parameterized tests; use [Fact] for explicit test cases.
    Moq Practices: Use specific values instead of It.IsAny<T> in Mock<T>.Setup and Mock<T>.Verify:
    Example: 
        // Good: Specific value
        _mock.Setup(x => x.GetById(specificId)).Returns(entity);
        // Bad: Overly permissive
        _mock.Setup(x => x.GetById(It.IsAny<Guid>())).Returns(entity);
    Minimize mocking internal members of the class under test; focus on public interfaces

Improve Code Testability
    Small Methods: Break large methods into smaller, internal methods for isolated testing.
    Internal Methods: Avoid private methods; use internal methods and expose them to the test project with [assembly: InternalsVisibleTo("TestProject")]:
    Example: 
        // In AssemblyInfo.cs or UserService.cs
        [assembly: InternalsVisibleTo("MyApp.Tests")]   

    Isolate Non-Deterministic Code: Abstract calls to DateTime.Now, Guid.NewGuid(), etc., behind internal virtual methods (e.g., CreateDate, CreateGuid):
    Example: 
        // Isolate DateTime.Now
        internal virtual DateTime CreateDate() => DateTime.Now;
        // Isolate Guid.NewGuid
        internal virtual Guid CreateGuid() => Guid.NewGuid();
    Asynchronous Code:  Design code to be asynchronous whenever possible to improve responsiveness.  Write asynchronous unit tests using `async` and `await`.
    Mocking: Mark internal methods as virtual to allow mocking with Moq:
    Example: 
        internal virtual User GetUserFromRepository(Guid id) =>             _repository.GetById(id);



