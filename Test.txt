using Castle.DynamicProxy;
using Microsoft.Extensions.Logging;
using System;
using System.Diagnostics;
using System.Reflection;

public class LoggingInterceptor : IInterceptor
{
    private readonly ILogger _logger;

    public LoggingInterceptor(ILogger<LoggingInterceptor> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public void Intercept(IInvocation invocation)
    {
        var methodInfo = invocation.MethodInvocationTarget ?? invocation.Method;
        var methodName = methodInfo.Name;
        var className = methodInfo.DeclaringType.Name;
        var parameters = string.Join(", ", invocation.Arguments.Select(arg => (arg ?? "").ToString()));

        _logger.LogInformation($"Method {methodName} in class {className} is executing with parameters: {parameters}");

        var stopwatch = Stopwatch.StartNew();

        try
        {
            invocation.Proceed(); // Proceed with the original method invocation
        }
        finally
        {
            stopwatch.Stop();
            var duration = stopwatch.ElapsedMilliseconds;

            _logger.LogInformation($"Method {methodName} execution completed in {duration} ms");
        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------
public static class LoggingProxyFactory
{
    public static T CreateProxy<T>(T target, ILogger<LoggingInterceptor> logger) where T : class
    {
        var generator = new ProxyGenerator();
        var interceptor = new LoggingInterceptor(logger);
        return generator.CreateInterfaceProxyWithTarget(target, interceptor);
    }
}
-------------------------------------------------------------------------------------------------------------------------------------
class Program
{
    static void Main(string[] args)
    {
        // Setup logging
        var serviceProvider = new ServiceCollection()
            .AddLogging(builder => builder.AddConsole())
            .BuildServiceProvider();
        var logger = serviceProvider.GetRequiredService<ILogger<LoggingInterceptor>>();

        // Create the original service instance
        IMyService originalService = new MyService();

        // Create a proxy for the service with logging interception
        IMyService proxiedService = LoggingProxyFactory.CreateProxy(originalService, logger);

        // Invoke methods on the proxied service
        proxiedService.DoSomething("test");
    }
}
