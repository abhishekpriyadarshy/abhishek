using Microsoft.Extensions.Logging;

public interface ICustomLogger
{
    void LogException(Exception ex);
    void LogError(string message);
    void LogInfo(string message);
    void LogCritical(string message);
    void LogWarning(string message);
}

public class CustomLogger : ICustomLogger
{
    private readonly ILogger<CustomLogger> _logger;
    private readonly string _projectType;

    public CustomLogger(ILogger<CustomLogger> logger)
    {
        _logger = logger;
        _projectType = "ABC"; // This can be set dynamically based on your application's requirements
    }

    public void LogException(Exception ex)
    {
        LogInternal(LogLevel.Error, "Exception", ex.Message, ex.StackTrace);
    }

    public void LogError(string message)
    {
        LogInternal(LogLevel.Error, "Error", message);
    }

    public void LogInfo(string message)
    {
        LogInternal(LogLevel.Information, "Info", message);
    }

    public void LogCritical(string message)
    {
        LogInternal(LogLevel.Critical, "Critical", message);
    }

    public void LogWarning(string message)
    {
        LogInternal(LogLevel.Warning, "Warning", message);
    }

    private void LogInternal(LogLevel logLevel, string category, string message, string stackTrace = null)
    {
        var dict = new Dictionary<string, object>
        {
            { "category", category },
            { "message", message },
            { "time", DateTime.Now.ToString() }
        };

        if (stackTrace != null)
        {
            dict.Add("StackTrace", stackTrace);
        }

        if (_projectType == "ABC")
        {
            _logger.Log(logLevel, "{@LogData}", dict);
        }
        else if (_projectType == "XYZ")
        {
            var stringDict = dict.ToDictionary(k => k.Key, v => v.Value.ToString());
            _logger.Log(logLevel, "{@LogData}", stringDict);
        }
        else
        {
            throw new InvalidOperationException("Unknown project type");
        }
    }
}
